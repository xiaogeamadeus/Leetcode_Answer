Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.

A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.

----------------------------------------------------------------------------------------------------

思路 选取中间值作为根 分治算法 类似二分查找 分治排序
差不多 但代码还是写不明白。


class Solution {
    public TreeNode sortedArrayToBST(int[] nums){
        return build(nums, 0, nums.length - 1);
    }
    TreeNode build(int[] nums, int left, int right){
        if (right < left) return null;
        int mid = (left + right) / 2;
        TreeNode root = new TreeNode(nums[mid]);
        root.left = build(nums, left, mid - 1);
        root.right = build(nums, mid + 1, right);
        return root;
    }
}


执行耗时:0 ms,击败了100.00% 的Java用户
内存消耗:41.4 MB,击败了6.83% 的Java用户

构建BST/二叉树 就是老老实实 根 左子树 右子树去设定就可以。

