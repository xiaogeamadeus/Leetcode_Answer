Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. 

Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). 

It is -1 if there is no cycle. Note that pos is not passed as a parameter.

Do not modify the linked list.
----------------------------------------------------------

这个题的方法有些triky，首先还是快慢指针。当快慢指针相遇时，假设慢指针走了k，快指针则走了2k。假设环的起点为第m个节点，那么慢指针相当于走了环的起点+（k-m）。
这时随便将两个指针的任意一个放到head 然后两个指针同样的速度出发，当它们再次相遇的时候，那个节点就是环的起点。 

public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode fast = head, slow = head;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast){
                slow = head;
                while (slow != fast){
                    slow = slow.next;
                    fast = fast.next;
                }
                return slow;
            }
        }
        return null;
    }
}
