Given a linked list, swap every two adjacent nodes and return its head. 
You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)

--------------------------------------------------------------------
虚拟头节点：
class Solution {
    public ListNode swapPairs(ListNode head) {
        if (head == null) {
            return head;
        }

        ListNode dummyhead = new ListNode(0);
        dummyhead.next = head;
        ListNode prev = dummyhead;

        while (prev.next != null && prev.next.next != null) {
            ListNode temp = head.next.next;
            prev.next = head.next;
            head.next.next = head;
            head.next = temp;
            // prev++;
            prev = head;
            // head++;
            head = head.next;
        }

        return dummyhead.next;


    }
}

递归：
class Solution {
    public ListNode swapPairs(ListNode head) {
        // 递归方法必须有限制条件
        if (head == null || head.next == null) {
            return head;
        }
        
        ListNode next = head.next;
        ListNode newNode = swapPairs(next.next);

        // 每一组递归条件内部都有的行为。
        next.next = head;
        head.next = newNode;

        return next;

    }
}
