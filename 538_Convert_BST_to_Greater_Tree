Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.

As a reminder, a binary search tree is a tree that satisfies these constraints:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 
-------------------------------------------------------------------------------------

思路：仍旧是利用中序遍历有序的想法，将累加放在中序就可以了。

class Solution {
    public TreeNode convertBST(TreeNode root) {
        traversal(root);
        return root;
    }
    int sum = 0;
    void traversal(TreeNode root) {
        if (root == null) {
            return;
        }
        traversal(root.right);

        //赋值应当放在中序
        sum = sum + root.val;
        root.val = sum;
        traversal(root.left);
    }
}


执行耗时:0 ms,击败了100.00% 的Java用户
内存消耗:41.7 MB,击败了5.10% 的Java用户

Tips:
1. 如果想要将BST的中序遍历的结果，由升序变为降序怎么办？很简单，只要更换递归的先后就可以了，先右后左就变成降序了。

