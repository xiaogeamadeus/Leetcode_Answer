Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

-----------------------------------------------------------------------------

方法1 堆栈，如果有#退格代表把栈头去掉。
class Solution {
    public boolean backspaceCompare(String s, String t) {
        Stack<Character> st1 =new Stack<>();
        Stack<Character> st2 =new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '#') {
                st1.push(s.charAt(i));
            }
            else if (!st1.isEmpty()) st1.pop();
        }
        for (int i = 0; i < t.length(); i++) {
            if(t.charAt(i) != '#') {
                st2.push(t.charAt(i));
            }
            else if (!st2.isEmpty()) st2.pop();
        }

        while (!st1.isEmpty() && !st2.isEmpty()) {
            if(st1.pop() != st2.pop()) return false;
        }
        return st1.isEmpty() && st2.isEmpty();
    }
}


方法2: 双指针

一个字符是否会被删除，只取决于后面的字符是否是#，跟前面的字符没有任何关系。
可以从后往前遍历，这样就可以做到直接对#前面的字符进行删除。


class Solution {
    public boolean backspaceCompare(String s, String t) {
        int p1, p2;
        int skip1, skip2;
        skip1 = 0;
        skip2 = 0;
        p1 = s.length() - 1;
        p2 = t.length() - 1;
        while (p1 >= 0 || p2 >= 0) {
            while (p1 >= 0) {
                if (s.charAt(p1) == '#') {
                    skip1++;
                    p1--;
                } else if (skip1 > 0) {
                    skip1--;
                    p1--;
                } else break;
            }

            while (p2 >= 0) {
                if (t.charAt(p2) == '#') {
                    skip2++;
                    p2--;
                } else if (skip2 > 0) {
                    skip2--;
                    p2--;
                } else break;
            }

            if (p1 >= 0 && p2 >= 0) {
                if (s.charAt(p1) != t.charAt(p2)) {
                    return false;
                }
            } else {
                if (p1 >= 0 || p2 >= 0) {
                        return false;
                }
            }
            p1--;
            p2--;
        }
        return true;
    }
}
在大的，针对整个字符串的循环之内。
前两个while循环负责处理#所带来的问题，使得双指针能够指到正确的比较位置（退格后）
然后用if判断比较，如果不一样直接false，如果一样但最后一个字符串到0，一个还没有，也返回false。
如果没有返回false，则在最外面返回true。
