You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. 
It is guaranteed that the new value does not exist in the original BST.

Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.
-----------------------------------------------------------------------------------------------------------------------------------------
解法：基本弄明白了。用递归方法插入的话，其实是一个1. 找到位置 2. 插入的过程。通过递归，不断对比大小寻找位置，找到位置之后插入，然后每一次递归结束都要更新一次树，保证最后return的是一颗新树

之所以第一个if要return一个新的树节点就是因为无法把新的节点插入到这个位置上，但return一个新的节点之后，val就变成了一颗新树。

class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {

//  Insert the new node.
        if (root == null) {
            return new TreeNode(val);
        }

//  The equal case don't be considered.
        if (root.val > val) {
           root.left = insertIntoBST(root.left, val);
        }
        if (root.val < val) {
            root.right = insertIntoBST(root.right, val);
        }
        
//  Renew the BST
        return root;
    }
}

执行耗时:0 ms,击败了100.00% 的Java用户
内存消耗:42.1 MB,击败了6.40% 的Java用户


