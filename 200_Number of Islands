class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null && grid.length == 0) {
            return 0;
        }
        int m = grid.length;
        int n = grid[0].length;
        int res = 0;

        for (int r = 0; r < m; r++) {
            for (int c = 0; c < n; c++) {
                if (grid[r][c] == '1') {
                    res++;
                    grid[r][c] = '0';

                    Queue<Integer> neighbors = new LinkedList<>();
                    neighbors.offer(r * n + c);
                    while (!neighbors.isEmpty()) {
                        int id = neighbors.poll();
                        int row = id / n;
                        int col = id % n;
                        if (row - 1 >= 0 && grid[row-1][col] == '1') {
                            neighbors.offer((row-1)*n + col);
                            grid[row-1][col] = '0';
                        }
                        if (row + 1 < m && grid[row+1][col] == '1') {
                            neighbors.offer((row+1)*n + col);
                            grid[row+1][col] = '0';
                        }
                        if (col - 1 >= 0 && grid[row][col-1] == '1') {
                            neighbors.offer(row*n + col - 1);
                            grid[row][col-1] = '0';
                        }
                        if (col + 1 < n && grid[row][col+1] == '1') {
                            neighbors.offer(row*n + col + 1);
                            grid[row][col+1] = '0';
                        }
                    }

                }
            }
        }
        return res;
    }
}
