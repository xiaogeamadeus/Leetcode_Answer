You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.
---------------------------------------------------------------------------------------------------------

错误解法：
root 该做什么？把自己的左右子节点用指针串起来
什么时候做？ 后序

错误原因：只考虑了每棵树的左右子节点，左树右节点与右树左节点之间的指针并没有考虑

正确解法：既然只考虑root节点该做什么做不到，那就不如增加函数参数，一个节点做不到就用两个。
基于根节点的左右子节点进行连接，连接左节点的左节点与右节点、右节点的左节点与右节点、左节点的右节点与右节点的左节点。

换句话说，递归的考虑变成了每两个节点（横向）之间互相相连。


class Solution {
    public Node connect(Node root) {
        if (root == null) {
            return null;
        }
        connectTwoNode(root.left, root.right);
        return root;
    }
    
    void connectTwoNode(Node Node1, Node Node2){
        if (Node1 == null || Node2 == null) {
            return;
        }
        Node1.next = Node2;
        
// connect the leftchild and the rightchild of Node1
        connectTwoNode(Node1.left, Node1.right);
        
// connect the leftchild and the rightchild of Node2
        connectTwoNode(Node2.left, Node2.right);

// connect the Node between the left tree and the right tree 
        connectTwoNode(Node1.right, Node2.left);
    }
}

执行用时：2 ms, 在所有 Java 提交中击败了66.18%的用户
内存消耗：41.6 MB, 在所有 Java 提交中击败了5.01%的用户

还不错，貌似迭代也能做，但是比较麻烦，还没有看。
Tips：
1. 对于Node作为类型时，返回root代表返回整只树。

            
            
            
            
