Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. 
The relative order of the elements should be kept the same.
Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. 
More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. 
It does not matter what you leave beyond the first k elements. Return k after placing the final result in the first k slots of nums.
Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.
-------------------------------------------------------------------------------------
第26题的变种。第一思路是在第26题的基础上添加一个判定，如果right-left > 2 才会交换。
代码如下：
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        left = 0
        right = 0
        while right < len(nums):
            if nums[left] == nums[right]:
                right += 1
            else:
                if right - left > 2:
                    nums[left+2] = nums[right]
                    left += 1
                right += 1
        return left + 2
大概只能通过一半左右的例子。[1,2,2]会出错。
加个过短判定试试。
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        n = len(nums)
        if n <= 2:
            return n
        left = 0
        right = 0
        while right < n:
            if nums[left] == nums[right]:
                right += 1
            else:
                if right - left > 2:
                    nums[left+2] = nums[right]
                    left += 1
                right += 1
        return left + 2
还不行，问题不在这里，看起来这个思路不对，决定去看一下题解。题解的代码还蛮漂亮的，left 和 right指针从2开始。
当然，题解是一个java代码。
class Solution {
    public int removeDuplicates(int[] nums) {
        int n = nums.length;
        if (n <= 2) {
            return n;
        }
        int slow = 2, fast = 2;
        while (fast < n) {
            if (nums[slow - 2] != nums[fast]) {
                nums[slow] = nums[fast];
                ++slow;
            }
            ++fast;
        }
        return slow;
    }
}
模拟题解写出自己的python代码。
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        n = len(nums)
        if n <= 2:
            return n
        left = 2
        right = 2
        while right < n:
            if nums[left-2] != nums[right]:
                nums[left] = nums[right]
                left += 1
            right +=1
        return left
成功通过
执行用时：28 ms, 在所有 Python3 提交中击败了91.43%的用户
内存消耗：14.9 MB, 在所有 Python3 提交中击败了71.92%的用户
速度基本满意，不寻求更优化了。

看了一下时间最快代码。
寻求的是
看了一下时间最快代码。z
看了一下时间最快代码
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        def solve(k):
            u = 0
            for x in nums:
                if u < k or nums[u - k] != x:
                    nums[u] = x
                    u += 1
            return u
        return solve(2)
