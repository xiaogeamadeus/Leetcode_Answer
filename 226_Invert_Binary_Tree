Given the root of a binary tree, invert the tree, and return its root.

------------------------------------------------------------------------

解法 简单的后序递归 
root该做什么？ 交换自己的左右子节点
什么时候做？ 前序即可，不需要知道子树的信息，左右子节点的信息随时都可以调用，与之前的计算不同

class Solution {
    public TreeNode invertTree(TreeNode root) {
        if (root == null) {
            return null;
        }
        
// exchange the leftchild and the rightchild
        TreeNode tmp = root.left;
        root.left = root.right;
        root.right = tmp;

//recursive
        invertTree(root.left);
        invertTree(root.right);

        return root;
    }

}
执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户
内存消耗：39 MB, 在所有 Java 提交中击败了5.01%的用户


Tips：
1. 本题题干要求以节点方式进行输出，不需要创造链表结构，也不需要调用数值，节点到节点即可。'

实际上，本题前序后序都可以，但中序不行，原因是为何？
原因在于顺序。不论是自顶而下还是自下而上（前序遍历和后序遍历），都是纵轴方向前进，而中序遍历是以横轴方向前进，在翻转的时候会出现问题。翻完左子树 然后翻根（此时左子树变成了右子树），
然后翻右子树，实际上左子树被翻了两次，而右子树没有被翻，结果错误。



