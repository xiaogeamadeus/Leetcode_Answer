Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.
Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. 
More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. 
It does not matter what you leave beyond the first k elements. Return k after placing the final result in the first k slots of nums.
Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.
------------------------------------------------------------------------------------
看到题目的自己想法：指针，但不清楚python里面是链表结构还是别的什么。然后考虑利用一个for循环，将每个相同的删掉（暴力法）不知道为什么代码失效。（对python使用有错，是0到length-1不是0到length）
想了一下这个方法本质也是一个指针，准备欣赏一下别人的双指针方法。
第一版：
class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        left = 0
        right = len(nums)
        while left < right:
            if nums[left] == val:
                nums[left] = nums[right - 1]
                right -= 1
            else:
                left += 1
        return left
左指针用来计数，右指针用来替换。左指针在开头，右指针在结尾。其实这个代码本质不是删除，而是将数组变成：前半部分为正确输出，后半部分为删除对象，然后截取前半部分return。
执行用时：32 ms, 在所有 Python3 提交中击败了66.91%的用户。
内存消耗：14.9 MB, 在所有 Python3 提交中击败了52.18%的用户。
时间复杂度：O(n)
空间复杂度：O(1)
--------------------------------------------------------------
如何提升？
本质上这个方法不管怎样都需要遍历一遍数组，目前没有想到近一步提升的方法。
看了一下100%速度的代码
    class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        i = j = 0 
        n = len(nums)
        while j < n:
            if nums[j] == val:
                j += 1 
            else:
                nums[i] = nums[j]
                i += 1 
                j += 1 
        return i
这个
