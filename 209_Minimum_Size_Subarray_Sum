Given an array of positive integers nums and a positive integer target, 
return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr] of which the sum is greater than or equal to target. 
If there is no such subarray, return 0 instead.
--------------------------------------
解法1：暴力O(n^2)不推荐

解法2: 滑动窗口（特别的双指针）

先把数组加到刚刚好大于target 然后减去一个 再加到刚刚好大于target，每次计算right-left+1的长度，然后取长度的最小值。

class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int left = 0;
        int sum = 0;
        int res = Integer.MAX_VALUE;
       for (int right = 0; right < nums.length; right++) {
           sum += nums[right];
           while (sum >= target) {
               res = Math.min(res, right-left+1);
               sum -= nums[left++];
           }
       }
       return res == Integer.MAX_VALUE ? 0 : res;
    }
}
