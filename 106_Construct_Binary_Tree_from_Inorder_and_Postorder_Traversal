Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, 
construct and return the binary tree.

-------------------------------------------------------------------------------------

解法：与105思路完全一致，需要区分前序中序后序的区别即可。


class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        return getRoot(inorder, 0, inorder.length - 1, 
                       postorder, 0, postorder.length - 1);

    }
    TreeNode getRoot(int[] inorder, int inStart, int inEnd, 
                     int[] postorder, int postStart, int postEnd) {
        if(postStart > postEnd) {
            return null;
        }

        int rootval = postorder[postEnd];
        int index = 0;

        for (int i = inStart; i <= inEnd; i++) {
            if (inorder[i] == rootval) {
                index = i;
                break;              
            }
        }

        TreeNode root = new TreeNode(rootval);

        int leftsite = index - inStart;

        root.left = getRoot(inorder, inStart, index - 1, 
                            postorder, postStart, postStart + leftsite - 1);
        root.right = getRoot(inorder, index + 1, inEnd, 
                             postorder, postStart + leftsite, postEnd - 1);

        return root;
    }
}

执行用时：3 ms, 在所有 Java 提交中击败了60.10%的用户
内存消耗：40.9 MB, 在所有 Java 提交中击败了12.43%的用户

Tips： 
1. 范围！范围！范围！ 有没有等于 大于等于还是大于，小于等于还是小于，一定要判断清楚。



