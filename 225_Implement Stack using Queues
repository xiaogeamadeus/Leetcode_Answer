Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).

Implement the MyStack class:

void push(int x) Pushes element x to the top of the stack.
int pop() Removes the element on the top of the stack and returns it.
int top() Returns the element on the top of the stack.
boolean empty() Returns true if the stack is empty, false otherwise.
Notes:

You must use only standard operations of a queue, which means that only push to back, 
peek/pop from front, size and is empty operations are valid.
Depending on your language, the queue may not be supported natively. 

You may simulate a queue using a list or deque (double-ended queue) 
as long as you use only a queue's standard operations.
---------------------------------------------
用一个队列实现的方法。
class MyStack {
        private Queue<Integer> q;
        private int top_elem;
    public MyStack() {
        q = new LinkedList<>();
        top_elem = 0;
    }
    
    public void push(int x) {
        q.offer(x);
        top_elem = x;
    }
    
    public int pop() {
        int size = q.size();
        while(size > 2) {
            q.offer(q.poll());
            size--;
        }
        top_elem = q.peek();
        q.offer(q.poll());
        return q.poll();
    }
    
    public int top() {
        return top_elem;
    }
    
    public boolean empty() {
        return q.isEmpty();
    }
}


---------------------------------
两个队列的解决方法
空间复杂度不如一个队列
class MyStack {
       Queue<Integer> queue1, queue2;
    public MyStack() {
        queue1 = new LinkedList<>();
        queue2 = new LinkedList<>();
    }
    
    public void push(int x) {
        queue2.offer(x);
        while(!queue1.isEmpty()) {
            queue2.offer(queue1.poll());
        }
        Queue<Integer> queueTemp;
        queueTemp = queue1;
        queue1 = queue2;
        queue2 = queueTemp;
    }
    
    public int pop() {
        return queue1.poll();
    }
    
    public int top() {
        return queue1.peek();
    }
    
    public boolean empty() {
        return queue1.isEmpty();
    }
}

