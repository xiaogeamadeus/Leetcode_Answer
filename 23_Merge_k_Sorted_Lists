You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.
-------------------------------------------------------------------------------------------------
一道困难 面试题目中非常常见。关键点在于对优先级队列的应用。


class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0) return null;

        ListNode dummy = new ListNode(-1);
        ListNode p = dummy;
        PriorityQueue<ListNode> pq = new PriorityQueue<>(lists.length, (a,b)->(a.val - b.val));

//将K个listnode的头节点head推进优先级队列pq中。

        for(ListNode head: lists){
            if(head != null) pq.add(head);
        }

//循环，找到头节点中最小的，推出，然后补上下一个数。
        while(!pq.isEmpty()){
            ListNode node = pq.poll();
            p.next = node;
            if(node.next != null){
                pq.add(node.next);
            }
            p = p.next;
        }
        return dummy.next;
    }
}


执行耗时:4 ms,击败了70.40% 的Java用户
内存消耗:43.3 MB,击败了12.97% 的Java用户
