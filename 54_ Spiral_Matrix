Given an m x n matrix, return all elements of the matrix in spiral order.

-------------------------------------------------------

注意几点：
1.用链表
2.注意upper的增加 lower的减少 left的增加 right的减少 

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        //螺旋遍历数组

        //找到数组的长和宽
        int m = matrix.length;
        int n = matrix[0].length;

        //用四个边界来限定数组遍历的位置
        int upper_bound = 0, left_bound = 0, right_bound = n - 1, lower_bound = m - 1;
        //输出用list
        List<Integer> res = new LinkedList<>();
        //完成对整个数组的遍历
        while (res.size() < m*n) {
            if (upper_bound <= lower_bound) {
                //顶部，从左向右遍历
                for (int j = left_bound; j <= right_bound; j++) {
                    res.add(matrix[upper_bound][j]);
                }
                upper_bound++;
            }

            if (left_bound <= right_bound) {
                //右部，从上向下遍历
                for (int i = upper_bound; i <= lower_bound; i++) {
                    res.add(matrix[i][right_bound]);
                }
                right_bound--;
            }

            if (upper_bound <= lower_bound) {
                //底部，从右向左遍历
                for (int j = right_bound; j >= left_bound; j--) {
                    res.add(matrix[lower_bound][j]);
                }
                lower_bound--;
            }

            if (left_bound <= right_bound) {
                //左部，从下到上遍历
                for (int i = lower_bound; i >= upper_bound; i--) {
                    res.add(matrix[i][left_bound]);
                }
                left_bound++;
            }
        }
        return res;
    }
}
